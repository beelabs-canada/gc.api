#!/usr/bin/env perl

use strict;
use warnings;
no warnings 'experimental::smartmatch';

use v5.16;
use lib 'cgi-lib';

use Path::Tiny qw/path/;
use YAML::XS qw(LoadFile);
use File::Next;
use Text::Trim;

use Data::Dmp;

# ===================================================================
# = INITIALIZATION                                                  =
# ===================================================================
# lets get the arguements passed
my @args = @ARGV;

usage() if ( scalar( @args ) < 1 || grep( /^help$/i, @args ) );

# ===================================================================
# = VARIABLES                                                       =
# ===================================================================
my $config = LoadFile('mason.yaml');

my ( $base, $command, @params ) = ( path($0)->parent->absolute, shift( @args), @args );

# ===================================================================
# = DASHBOARD.                                                      =
# ===================================================================
given ($command) {
	
	when( /^make:database$/ ) {
		database( $base, @params);
	}
	when( /^make:route$/ ) {
		route( $base, @params);
	}
	when( /^make:migration$/ ) {
		sqlfile( $base, @params);
	}
	when( /^migrate:db$/ ) {
		migrate( $base, @params);
	}
	when( /^migrate:refresh$/ ) {
		refresh( $base, @params);
	}
	when( /^route:silence$/ ) {
		silence( $base, @params);
	}
	default {
		usage();
	}
	
}


# ===================================================================
# = HELPER FUNCTIONS                                                =
# ===================================================================

sub usage
{
	cls();
	
	say join( "\n", (
	"# Mason v1.0",
	"Usage: perl mason [make:*]",
	"Options:",
	"	help - this help screen",
	"Make:",
	"	make:route - create a route",
	"	make:database - create a database",
    "	make:migration - create a migration file",
	"Migrate:",
	"	migrate:db - execute the database migrations",
	"	migrate:refresh - truncate the database and re-run migrations",
    "Route:",
    "   route:silence - make a specific route not available to browsers (404)"
	));
	
	exit(0);
}

sub route
{
	my ( $base, $route  ) = @_;
	
	if ( $base->child('public'.lc($route).'/index.cgi')->exists() )
	{
		return;
	}
	
	# lets create the index file
	$base->child('public/'.lc($route).'/index.cgi')->touchpath->spew_utf8( $config->{'template'}->{'route'} );
	$base->child('public/'.lc($route).'/index.yaml')->touchpath->spew_utf8( $config->{'template'}->{'ini'} );
	return;
}

sub migrate
{
    
	my ( $base, $name  ) = @_;
    
    my $dbfile = $base->child('db/'.lc($name).'/database.sqlite')->absolute->stringify ;
    
	if ( ! -e $dbfile )
	{
		say " [migrate] error - no database was found .. maybe run 'make:database $name' ?";
        return \0;
	}
    
    require DBI;
    
    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","");
    
	say " [migrate] running migrations files for  - $name";
        
    my $files = File::Next::files( 
        { file_filter => sub { /^migration\.(.*)\.sql$/ }, sort_files => 1 },
        path('db/'.lc($name))->stringify
    );
    
    while ( defined ( my $file = $files->() ) ) {
       
       print "     [parsing] SQL ( ".$file. " ) ...";
       
       my $sql = $base->child( $file )->slurp_utf8();
       
       if ( $sql !~ /\S/ )
       {
           print " [skipping] no SQL found\n";
           continue;
       }
              
       $dbh->do( _parseSQL( $sql ) );
       
       print "     executed (OK)\n";
    }
    	
}

sub sqlfile
{
	my ( $base, $name, $idx  ) = ( @_, 0 );
    
    my $files = File::Next::files( 
        { file_filter => sub { /^migration\.(.*)\.sql$/ } },
        path('db/'.lc($name))->stringify
        );
    
    while ( defined ( my $file = $files->() ) ) {
         $idx++;
    }
 	
    my $migration = $base->child('db/'.lc($name).'/migration.'.$idx.'.sql');
    
	$migration->touchpath;
    
    say "   [make] created a new migration file (".$migration->relative($base)->stringify.")"
}

sub refresh
{
	my ( $base, $name  ) = @_;
	
	if ( ! $base->child('db/'.lc($name).'/database.sqlite')->exists() )
	{
		$base->child('db/'.lc($name).'/database.sqlite')->touchpath;
	}
	
	$base->child('db/'.lc($name).'/database.sqlite')->remove;
	$base->child('db/'.lc($name).'/database.sqlite')->touch;
    
    say " [migrate:refresh] truncated the database - $name";
    
	
	migrate( $base, $name );
}

sub database
{
	my ( $base, $name  ) = @_;
	

	if ( $base->child('db/'.lc($name).'.sqlite')->exists() )
	{
		return 1;
	}
	
	# Step 1 - create the migration folder
	$base->child('db/'.lc($name))->mkpath;
	# Step 2 - create the database
	$base->child('db/'.lc($name).'/database.sqlite')->touch;
	# Step 3 - create the first migration file
	$base->child('db/'.lc($name).'/migration.0.sql')->touchpath;
	
	say ' [database] created .. db/'.lc($name).'.sqlite';
	
	return;
}

sub _parseSQL
{
    my ( $sql ) = @_;
    # remove comments
    #$sql =~ s/((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)|(?:\/\/.*))//g;
    $sql =~ s#("(""|[^"])*")|('(''|[^'])*')|(--[^\n\r]*)|(\/\*[\w\W]*?(?=\*\/)\*\/)##g;
    $sql =~ s/\n+/ /g;
    $sql =~ s/\s+/ /g;
    return trim( $sql );
}

sub silence
{
	my ( $base, $route  ) = @_;
	
    my $htaccess = $base->child('public'.lc($route))->child('.htaccess') ;
    
	if ( $htaccess->exists() )
	{
        $htaccess->move( $htaccess->sibling( '.htaccess.'.time.'.bkp' )  );
	}
	
	# lets create the index file
	$htaccess->touchpath->spew_utf8( $config->{'route'}->{'silence'} );
    
    say ' [route] silenced .. public'.lc($route);
}


sub cls
{
	my $cmd = (  $^O eq 'MSWin32' ) ? 'cls' : 'clear';
	system( $cmd );
}